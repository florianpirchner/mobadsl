/**
 */
package org.mobadsl.semantic.model.moba.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.mobadsl.semantic.model.moba.util.MobaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MobaItemProviderAdapterFactory extends MobaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MobaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaApplicationItemProvider mobaApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaApplicationAdapter() {
		if (mobaApplicationItemProvider == null) {
			mobaApplicationItemProvider = new MobaApplicationItemProvider(this);
		}

		return mobaApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaTemplate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaTemplateItemProvider mobaTemplateItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaTemplate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaTemplateAdapter() {
		if (mobaTemplateItemProvider == null) {
			mobaTemplateItemProvider = new MobaTemplateItemProvider(this);
		}

		return mobaTemplateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaGeneratorItemProvider mobaGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaGeneratorAdapter() {
		if (mobaGeneratorItemProvider == null) {
			mobaGeneratorItemProvider = new MobaGeneratorItemProvider(this);
		}

		return mobaGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaGeneratorMixinFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaGeneratorMixinFeatureItemProvider mobaGeneratorMixinFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaGeneratorMixinFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaGeneratorMixinFeatureAdapter() {
		if (mobaGeneratorMixinFeatureItemProvider == null) {
			mobaGeneratorMixinFeatureItemProvider = new MobaGeneratorMixinFeatureItemProvider(this);
		}

		return mobaGeneratorMixinFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaGeneratorIDFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaGeneratorIDFeatureItemProvider mobaGeneratorIDFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaGeneratorIDFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaGeneratorIDFeatureAdapter() {
		if (mobaGeneratorIDFeatureItemProvider == null) {
			mobaGeneratorIDFeatureItemProvider = new MobaGeneratorIDFeatureItemProvider(this);
		}

		return mobaGeneratorIDFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaDataTypeItemProvider mobaDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaDataTypeAdapter() {
		if (mobaDataTypeItemProvider == null) {
			mobaDataTypeItemProvider = new MobaDataTypeItemProvider(this);
		}

		return mobaDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaConstantItemProvider mobaConstantItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaConstantAdapter() {
		if (mobaConstantItemProvider == null) {
			mobaConstantItemProvider = new MobaConstantItemProvider(this);
		}

		return mobaConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaConstantValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaConstantValueItemProvider mobaConstantValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaConstantValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaConstantValueAdapter() {
		if (mobaConstantValueItemProvider == null) {
			mobaConstantValueItemProvider = new MobaConstantValueItemProvider(this);
		}

		return mobaConstantValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaPropertyItemProvider mobaPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaPropertyAdapter() {
		if (mobaPropertyItemProvider == null) {
			mobaPropertyItemProvider = new MobaPropertyItemProvider(this);
		}

		return mobaPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaSettingsItemProvider mobaSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaSettingsAdapter() {
		if (mobaSettingsItemProvider == null) {
			mobaSettingsItemProvider = new MobaSettingsItemProvider(this);
		}

		return mobaSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaCache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaCacheItemProvider mobaCacheItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaCache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaCacheAdapter() {
		if (mobaCacheItemProvider == null) {
			mobaCacheItemProvider = new MobaCacheItemProvider(this);
		}

		return mobaCacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaBean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaBeanItemProvider mobaBeanItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaBean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaBeanAdapter() {
		if (mobaBeanItemProvider == null) {
			mobaBeanItemProvider = new MobaBeanItemProvider(this);
		}

		return mobaBeanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaBeanIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaBeanIndexItemProvider mobaBeanIndexItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaBeanIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaBeanIndexAdapter() {
		if (mobaBeanIndexItemProvider == null) {
			mobaBeanIndexItemProvider = new MobaBeanIndexItemProvider(this);
		}

		return mobaBeanIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaPayload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaPayloadItemProvider mobaPayloadItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaPayload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaPayloadAdapter() {
		if (mobaPayloadItemProvider == null) {
			mobaPayloadItemProvider = new MobaPayloadItemProvider(this);
		}

		return mobaPayloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaQueue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaQueueItemProvider mobaQueueItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaQueue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaQueueAdapter() {
		if (mobaQueueItemProvider == null) {
			mobaQueueItemProvider = new MobaQueueItemProvider(this);
		}

		return mobaQueueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaServiceItemProvider mobaServiceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaServiceAdapter() {
		if (mobaServiceItemProvider == null) {
			mobaServiceItemProvider = new MobaServiceItemProvider(this);
		}

		return mobaServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaRestCustom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaRestCustomItemProvider mobaRestCustomItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaRestCustom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaRestCustomAdapter() {
		if (mobaRestCustomItemProvider == null) {
			mobaRestCustomItemProvider = new MobaRestCustomItemProvider(this);
		}

		return mobaRestCustomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaRestCrud} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaRestCrudItemProvider mobaRestCrudItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaRestCrud}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaRestCrudAdapter() {
		if (mobaRestCrudItemProvider == null) {
			mobaRestCrudItemProvider = new MobaRestCrudItemProvider(this);
		}

		return mobaRestCrudItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaBeanAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaBeanAttributeItemProvider mobaBeanAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaBeanAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaBeanAttributeAdapter() {
		if (mobaBeanAttributeItemProvider == null) {
			mobaBeanAttributeItemProvider = new MobaBeanAttributeItemProvider(this);
		}

		return mobaBeanAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaBeanReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaBeanReferenceItemProvider mobaBeanReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaBeanReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaBeanReferenceAdapter() {
		if (mobaBeanReferenceItemProvider == null) {
			mobaBeanReferenceItemProvider = new MobaBeanReferenceItemProvider(this);
		}

		return mobaBeanReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaPayloadAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaPayloadAttributeItemProvider mobaPayloadAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaPayloadAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaPayloadAttributeAdapter() {
		if (mobaPayloadAttributeItemProvider == null) {
			mobaPayloadAttributeItemProvider = new MobaPayloadAttributeItemProvider(this);
		}

		return mobaPayloadAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaPayloadReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaPayloadReferenceItemProvider mobaPayloadReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaPayloadReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaPayloadReferenceAdapter() {
		if (mobaPayloadReferenceItemProvider == null) {
			mobaPayloadReferenceItemProvider = new MobaPayloadReferenceItemProvider(this);
		}

		return mobaPayloadReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaQueueReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaQueueReferenceItemProvider mobaQueueReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaQueueReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaQueueReferenceAdapter() {
		if (mobaQueueReferenceItemProvider == null) {
			mobaQueueReferenceItemProvider = new MobaQueueReferenceItemProvider(this);
		}

		return mobaQueueReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaMuliplicity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaMuliplicityItemProvider mobaMuliplicityItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaMuliplicity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaMuliplicityAdapter() {
		if (mobaMuliplicityItemProvider == null) {
			mobaMuliplicityItemProvider = new MobaMuliplicityItemProvider(this);
		}

		return mobaMuliplicityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaSettingsAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaSettingsAttributeItemProvider mobaSettingsAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaSettingsAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaSettingsAttributeAdapter() {
		if (mobaSettingsAttributeItemProvider == null) {
			mobaSettingsAttributeItemProvider = new MobaSettingsAttributeItemProvider(this);
		}

		return mobaSettingsAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaRegexpConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaRegexpConstraintItemProvider mobaRegexpConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaRegexpConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaRegexpConstraintAdapter() {
		if (mobaRegexpConstraintItemProvider == null) {
			mobaRegexpConstraintItemProvider = new MobaRegexpConstraintItemProvider(this);
		}

		return mobaRegexpConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaMinConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaMinConstraintItemProvider mobaMinConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaMinConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaMinConstraintAdapter() {
		if (mobaMinConstraintItemProvider == null) {
			mobaMinConstraintItemProvider = new MobaMinConstraintItemProvider(this);
		}

		return mobaMinConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaMaxConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaMaxConstraintItemProvider mobaMaxConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaMaxConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaMaxConstraintAdapter() {
		if (mobaMaxConstraintItemProvider == null) {
			mobaMaxConstraintItemProvider = new MobaMaxConstraintItemProvider(this);
		}

		return mobaMaxConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaFutureConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaFutureConstraintItemProvider mobaFutureConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaFutureConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaFutureConstraintAdapter() {
		if (mobaFutureConstraintItemProvider == null) {
			mobaFutureConstraintItemProvider = new MobaFutureConstraintItemProvider(this);
		}

		return mobaFutureConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaPastConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaPastConstraintItemProvider mobaPastConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaPastConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaPastConstraintAdapter() {
		if (mobaPastConstraintItemProvider == null) {
			mobaPastConstraintItemProvider = new MobaPastConstraintItemProvider(this);
		}

		return mobaPastConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaNotNullConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaNotNullConstraintItemProvider mobaNotNullConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaNotNullConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaNotNullConstraintAdapter() {
		if (mobaNotNullConstraintItemProvider == null) {
			mobaNotNullConstraintItemProvider = new MobaNotNullConstraintItemProvider(this);
		}

		return mobaNotNullConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaNullConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaNullConstraintItemProvider mobaNullConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaNullConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaNullConstraintAdapter() {
		if (mobaNullConstraintItemProvider == null) {
			mobaNullConstraintItemProvider = new MobaNullConstraintItemProvider(this);
		}

		return mobaNullConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaMinLengthConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaMinLengthConstraintItemProvider mobaMinLengthConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaMinLengthConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaMinLengthConstraintAdapter() {
		if (mobaMinLengthConstraintItemProvider == null) {
			mobaMinLengthConstraintItemProvider = new MobaMinLengthConstraintItemProvider(this);
		}

		return mobaMinLengthConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaMaxLengthConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaMaxLengthConstraintItemProvider mobaMaxLengthConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaMaxLengthConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaMaxLengthConstraintAdapter() {
		if (mobaMaxLengthConstraintItemProvider == null) {
			mobaMaxLengthConstraintItemProvider = new MobaMaxLengthConstraintItemProvider(this);
		}

		return mobaMaxLengthConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaDigitsConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaDigitsConstraintItemProvider mobaDigitsConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaDigitsConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaDigitsConstraintAdapter() {
		if (mobaDigitsConstraintItemProvider == null) {
			mobaDigitsConstraintItemProvider = new MobaDigitsConstraintItemProvider(this);
		}

		return mobaDigitsConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaEnumItemProvider mobaEnumItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaEnumAdapter() {
		if (mobaEnumItemProvider == null) {
			mobaEnumItemProvider = new MobaEnumItemProvider(this);
		}

		return mobaEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mobadsl.semantic.model.moba.MobaEnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobaEnumLiteralItemProvider mobaEnumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.mobadsl.semantic.model.moba.MobaEnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobaEnumLiteralAdapter() {
		if (mobaEnumLiteralItemProvider == null) {
			mobaEnumLiteralItemProvider = new MobaEnumLiteralItemProvider(this);
		}

		return mobaEnumLiteralItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mobaApplicationItemProvider != null) mobaApplicationItemProvider.dispose();
		if (mobaTemplateItemProvider != null) mobaTemplateItemProvider.dispose();
		if (mobaGeneratorItemProvider != null) mobaGeneratorItemProvider.dispose();
		if (mobaGeneratorMixinFeatureItemProvider != null) mobaGeneratorMixinFeatureItemProvider.dispose();
		if (mobaGeneratorIDFeatureItemProvider != null) mobaGeneratorIDFeatureItemProvider.dispose();
		if (mobaDataTypeItemProvider != null) mobaDataTypeItemProvider.dispose();
		if (mobaConstantItemProvider != null) mobaConstantItemProvider.dispose();
		if (mobaConstantValueItemProvider != null) mobaConstantValueItemProvider.dispose();
		if (mobaPropertyItemProvider != null) mobaPropertyItemProvider.dispose();
		if (mobaSettingsItemProvider != null) mobaSettingsItemProvider.dispose();
		if (mobaCacheItemProvider != null) mobaCacheItemProvider.dispose();
		if (mobaBeanItemProvider != null) mobaBeanItemProvider.dispose();
		if (mobaBeanIndexItemProvider != null) mobaBeanIndexItemProvider.dispose();
		if (mobaPayloadItemProvider != null) mobaPayloadItemProvider.dispose();
		if (mobaQueueItemProvider != null) mobaQueueItemProvider.dispose();
		if (mobaServiceItemProvider != null) mobaServiceItemProvider.dispose();
		if (mobaRestCustomItemProvider != null) mobaRestCustomItemProvider.dispose();
		if (mobaRestCrudItemProvider != null) mobaRestCrudItemProvider.dispose();
		if (mobaBeanAttributeItemProvider != null) mobaBeanAttributeItemProvider.dispose();
		if (mobaBeanReferenceItemProvider != null) mobaBeanReferenceItemProvider.dispose();
		if (mobaPayloadAttributeItemProvider != null) mobaPayloadAttributeItemProvider.dispose();
		if (mobaPayloadReferenceItemProvider != null) mobaPayloadReferenceItemProvider.dispose();
		if (mobaQueueReferenceItemProvider != null) mobaQueueReferenceItemProvider.dispose();
		if (mobaMuliplicityItemProvider != null) mobaMuliplicityItemProvider.dispose();
		if (mobaSettingsAttributeItemProvider != null) mobaSettingsAttributeItemProvider.dispose();
		if (mobaRegexpConstraintItemProvider != null) mobaRegexpConstraintItemProvider.dispose();
		if (mobaMinConstraintItemProvider != null) mobaMinConstraintItemProvider.dispose();
		if (mobaMaxConstraintItemProvider != null) mobaMaxConstraintItemProvider.dispose();
		if (mobaFutureConstraintItemProvider != null) mobaFutureConstraintItemProvider.dispose();
		if (mobaPastConstraintItemProvider != null) mobaPastConstraintItemProvider.dispose();
		if (mobaNotNullConstraintItemProvider != null) mobaNotNullConstraintItemProvider.dispose();
		if (mobaNullConstraintItemProvider != null) mobaNullConstraintItemProvider.dispose();
		if (mobaMinLengthConstraintItemProvider != null) mobaMinLengthConstraintItemProvider.dispose();
		if (mobaMaxLengthConstraintItemProvider != null) mobaMaxLengthConstraintItemProvider.dispose();
		if (mobaDigitsConstraintItemProvider != null) mobaDigitsConstraintItemProvider.dispose();
		if (mobaEnumItemProvider != null) mobaEnumItemProvider.dispose();
		if (mobaEnumLiteralItemProvider != null) mobaEnumLiteralItemProvider.dispose();
	}

}
