grammar org.mobadsl.^grammar.Moba with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.mobadsl.semantic.model/model/Moba.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MobaApplication:
	'application' name=ID '{'
	(features+=MobaApplicationFeature*)
	'}';

MobaApplicationFeature:
	MobaDataType | MobaTemplate | MobaConstant | MobaSettings | MobaData | MobaService | MobaGenerator;

	/**
 * Will import a Moba-Application.
 */
MobaTemplate:
	'use template' template=[MobaApplication];

MobaGenerator:
	(active?='active')? 'generator' name=ID '{'
	features+=MobaGeneratorFeature*
	'}';

MobaGeneratorFeature:
	MobaGeneratorIDFeature | MobaGeneratorMixinFeature;

MobaGeneratorIDFeature:
	'id' '=' (generatorConst=[MobaConstant] | generatorString=STRING);

MobaGeneratorMixinFeature:
	'mixin' generatorRef=[MobaGenerator];

MobaDataType:
	'datatype' name=ID ('extends' superType=[MobaDataType])? ((primitive?='isPrimitive')? & (array?='isArray')? &
	((date?='isDate' | time?='isTime' | timestamp?='isTimestamp')
	('(' (dateFormatString=STRING | dateFormatConst=[MobaConstant]) ')')?)?
	& ('constraints' '(' constraints+=MobaConstraint (',' constraints+=MobaConstraint)* ')')?
	& (enumAST=MobaEnum)?) MobaPropertiesAble?;

MobaEnum:
	'enum' name=ID '{'
	literals+=MobaEnumLiteral (',' literals+=MobaEnumLiteral)*
	'}';

MobaEnumLiteral:
	'lit' name=ID '=' '(' literal=STRING ',' value=INT ')';

MobaConstant:
	'const' name=ID '=' valueAST=MobaConstantValue MobaPropertiesAble?;

MobaConstantValue:
	(valueString=STRING | valueInt=INT | valueDouble=DOUBLE | valueConst=[MobaConstant]) ('+' tail=MobaConstantValue)?;

fragment MobaPropertiesAble:
	'[' properties+=MobaProperty (',' properties+=MobaProperty)* ']';

MobaProperty:
	(keyString=STRING | keyConst=[MobaConstant]) '=' (valueString=STRING | valueConst=[MobaConstant]);

MobaData:
	MobaBean | MobaPayload | MobaQueue;

MobaSettings:
	{MobaSettings}
	(active?='active')? 'settings' name=ID ('extends' superType=[MobaSettings])? MobaPropertiesAble? '{'
	features+=MobaSettingsFeature*
	'}';

MobaCache:
	{MobaCache}
	'cache'
	// optional
	('('
	// type
	(('type' '=' (cacheTypeString=STRING |
	cacheTypeConst=[MobaConstant]))?
	// strategy
	& ('strategy' '=' (cacheStrategyString=STRING |
	cacheStrategyConst=[MobaConstant]))?) ')')?;

MobaBean:
	'bean' name=ID (('extends' superType=[MobaBean])? & (cache=MobaCache)?) MobaPropertiesAble? '{'
	features+=MobaBeanFeature*
	(index=MobaBeanIndex)?
	'}';

MobaBeanIndex:
	'index' attributes+=[MobaBeanAttribute] (',' attributes+=[MobaBeanAttribute]*);

MobaPayload:
	'payload' name=ID ('extends' superType=[MobaPayload])? MobaPropertiesAble? '{'
	features+=MobaPayloadFeature*
	'}';

MobaQueue:
	'queue' name=ID ('extends' superType=[MobaQueue])? MobaPropertiesAble? '{'
	features+=MobaQueueFeature*
	'}';

MobaService:
	MobaRestCustom | MobaRestCrud;

MobaRestCustom:
	'rest' name=ID MobaPropertiesAble?;

MobaRestCrud:
	'restCrud' name=ID MobaPropertiesAble?;

MobaBeanFeature:
	MobaBeanAttribute | MobaBeanReference;

MobaBeanAttribute:
	'var' ((lazy?='lazy')? & (transient?='transient')? & (domainKey?='domainKey')? &
	(domainDescription?='domainDescription')? & ('constraints' '(' constraints+=MobaConstraint (','
	constraints+=MobaConstraint)* ')')?)
	type=[MobaDataType] MobaMultiplicityAble name=ID MobaPropertiesAble?;

MobaSettingsFeature:
	MobaSettingsAttribute;

MobaSettingsAttribute:
	'var' ((lazy?='lazy')? & (transient?='transient')? & (domainKey?='domainKey')? &
	(domainDescription?='domainDescription')? & ('constraints' '(' constraints+=MobaConstraint (','
	constraints+=MobaConstraint)* ')')?)
	type=[MobaDataType] MobaMultiplicityAble name=ID MobaPropertiesAble?;

fragment MobaMultiplicityAble:
	(multiplicity=MobaMuliplicity)?;

MobaBeanReference:
	'ref' ((cascading?='cascading')? & (lazy?='lazy')? & (transient?='transient')?) type=[MobaBean] MobaMultiplicityAble
	name=ID
	MobaPropertiesAble?;

MobaPayloadFeature:
	MobaPayloadAttribute | MobaPayloadReference;

MobaPayloadAttribute:
	'var' ((lazy?='lazy')? & (transient?='transient')? & (domainKey?='domainKey')? &
	(domainDescription?='domainDescription')? & ('constraints' '(' constraints+=MobaConstraint (','
	constraints+=MobaConstraint)* ')')? & ('alias' '(' alias=ID ')')?)
	type=[MobaDataType] MobaMultiplicityAble name=ID MobaPropertiesAble?;

MobaPayloadReference:
	'ref' ((cascading?='cascading')? & (lazy?='lazy')? & (transient?='transient')?) type=[MobaPayload]
	MobaMultiplicityAble
	name=ID
	MobaPropertiesAble?;

MobaQueueFeature:
	MobaQueueReference;

MobaQueueReference:
	'ref' ((cascading?='cascading')? & (lazy?='lazy')? & (transient?='transient')?) type=[MobaData] MobaMultiplicityAble
	name=ID
	MobaPropertiesAble?;

MobaMuliplicity:
	'[' (lower=MobaLowerBound) ('..' upper=MobaUpperBound)? ']';

MobaConstraint:
	MobaRegexpConstraint | MobaMinConstraint | MobaMaxConstraint | MobaMinLengthConstraint | MobaMaxLengthConstraint |
	MobaDigitsConstraint | MobaNullConstraint | MobaNotNullConstraint;

MobaRegexpConstraint:
	'regexp' '=' (filterString=STRING | filterConst=[MobaConstant]);

MobaMinConstraint:
	'min' '=' (filterValue=DOUBLE | filterConst=[MobaConstant]);

MobaMaxConstraint:
	'max' '=' (filterValue=DOUBLE | filterConst=[MobaConstant]);

MobaMinLengthConstraint:
	'minLength' '=' (filterValue=INT | filterConst=[MobaConstant]);

MobaMaxLengthConstraint:
	'maxLength' '=' (filterValue=INT | filterConst=[MobaConstant]);

MobaDigitsConstraint:
	'digits' '(' (filterIntegerValue=INT | filterIntegerConst=[MobaConstant]) ',' (filterFractionValue=INT |
	filterFractionConst=[MobaConstant]) ')';

MobaNullConstraint:
	{MobaNullConstraint}
	'isNull';

MobaNotNullConstraint:
	{MobaNotNullConstraint}
	'isNotNull';

enum MobaLowerBound:
	MANY='*' | ZERO='0' | OPTIONAL='?' | ATLEASTONE='+' | ONE='1';

enum MobaUpperBound:
	MANY='*' | ONE='1';

	// if this is removed, antlr detects an error. INT and FLOAT can not become created since the are not unique definitions. 
terminal INT returns ecore::EInt:
	super::INT;
	
terminal DOUBLE returns ecore::EDouble:
	('+'|'-')? INT ('.' INT)?;

terminal FLOAT returns ecore::EFloat:
	INT
	(('e' | 'E') ('+' | '-')? INT)?
	(('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
