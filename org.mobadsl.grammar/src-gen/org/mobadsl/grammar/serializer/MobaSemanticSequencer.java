/*
 * generated by Xtext 2.9.0.beta6
 */
package org.mobadsl.grammar.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mobadsl.grammar.services.MobaGrammarAccess;
import org.mobadsl.semantic.model.moba.MobaApplication;
import org.mobadsl.semantic.model.moba.MobaCache;
import org.mobadsl.semantic.model.moba.MobaConstant;
import org.mobadsl.semantic.model.moba.MobaConstantValue;
import org.mobadsl.semantic.model.moba.MobaDataType;
import org.mobadsl.semantic.model.moba.MobaDigitsConstraint;
import org.mobadsl.semantic.model.moba.MobaDto;
import org.mobadsl.semantic.model.moba.MobaDtoAttribute;
import org.mobadsl.semantic.model.moba.MobaDtoReference;
import org.mobadsl.semantic.model.moba.MobaEntity;
import org.mobadsl.semantic.model.moba.MobaEntityAttribute;
import org.mobadsl.semantic.model.moba.MobaEntityIndex;
import org.mobadsl.semantic.model.moba.MobaEntityReference;
import org.mobadsl.semantic.model.moba.MobaEnum;
import org.mobadsl.semantic.model.moba.MobaEnumLiteral;
import org.mobadsl.semantic.model.moba.MobaGenerator;
import org.mobadsl.semantic.model.moba.MobaGeneratorIDFeature;
import org.mobadsl.semantic.model.moba.MobaGeneratorMixinFeature;
import org.mobadsl.semantic.model.moba.MobaMaxConstraint;
import org.mobadsl.semantic.model.moba.MobaMaxLengthConstraint;
import org.mobadsl.semantic.model.moba.MobaMinConstraint;
import org.mobadsl.semantic.model.moba.MobaMinLengthConstraint;
import org.mobadsl.semantic.model.moba.MobaMuliplicity;
import org.mobadsl.semantic.model.moba.MobaNotNullConstraint;
import org.mobadsl.semantic.model.moba.MobaNullConstraint;
import org.mobadsl.semantic.model.moba.MobaPackage;
import org.mobadsl.semantic.model.moba.MobaProperty;
import org.mobadsl.semantic.model.moba.MobaQueue;
import org.mobadsl.semantic.model.moba.MobaQueueReference;
import org.mobadsl.semantic.model.moba.MobaRegexpConstraint;
import org.mobadsl.semantic.model.moba.MobaRestCrud;
import org.mobadsl.semantic.model.moba.MobaRestCustom;
import org.mobadsl.semantic.model.moba.MobaSettings;
import org.mobadsl.semantic.model.moba.MobaSettingsAttribute;
import org.mobadsl.semantic.model.moba.MobaTemplate;

@SuppressWarnings("all")
public class MobaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MobaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MobaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MobaPackage.MOBA_APPLICATION:
				sequence_MobaApplication(context, (MobaApplication) semanticObject); 
				return; 
			case MobaPackage.MOBA_CACHE:
				sequence_MobaCache(context, (MobaCache) semanticObject); 
				return; 
			case MobaPackage.MOBA_CONSTANT:
				sequence_MobaConstant_MobaPropertiesAble(context, (MobaConstant) semanticObject); 
				return; 
			case MobaPackage.MOBA_CONSTANT_VALUE:
				sequence_MobaConstantValue(context, (MobaConstantValue) semanticObject); 
				return; 
			case MobaPackage.MOBA_DATA_TYPE:
				sequence_MobaDataType_MobaPropertiesAble(context, (MobaDataType) semanticObject); 
				return; 
			case MobaPackage.MOBA_DIGITS_CONSTRAINT:
				sequence_MobaDigitsConstraint(context, (MobaDigitsConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_DTO:
				sequence_MobaDto_MobaPropertiesAble(context, (MobaDto) semanticObject); 
				return; 
			case MobaPackage.MOBA_DTO_ATTRIBUTE:
				sequence_MobaDtoAttribute_MobaMultiplicityAble_MobaPropertiesAble(context, (MobaDtoAttribute) semanticObject); 
				return; 
			case MobaPackage.MOBA_DTO_REFERENCE:
				sequence_MobaDtoReference_MobaMultiplicityAble_MobaPropertiesAble(context, (MobaDtoReference) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY:
				sequence_MobaEntity_MobaPropertiesAble(context, (MobaEntity) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY_ATTRIBUTE:
				sequence_MobaEntityAttribute_MobaMultiplicityAble_MobaPropertiesAble(context, (MobaEntityAttribute) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY_INDEX:
				sequence_MobaEntityIndex(context, (MobaEntityIndex) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY_REFERENCE:
				sequence_MobaEntityReference_MobaMultiplicityAble_MobaPropertiesAble(context, (MobaEntityReference) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENUM:
				sequence_MobaEnum(context, (MobaEnum) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENUM_LITERAL:
				sequence_MobaEnumLiteral(context, (MobaEnumLiteral) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR:
				sequence_MobaGenerator(context, (MobaGenerator) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR_ID_FEATURE:
				sequence_MobaGeneratorIDFeature(context, (MobaGeneratorIDFeature) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR_MIXIN_FEATURE:
				sequence_MobaGeneratorMixinFeature(context, (MobaGeneratorMixinFeature) semanticObject); 
				return; 
			case MobaPackage.MOBA_MAX_CONSTRAINT:
				sequence_MobaMaxConstraint(context, (MobaMaxConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MAX_LENGTH_CONSTRAINT:
				sequence_MobaMaxLengthConstraint(context, (MobaMaxLengthConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MIN_CONSTRAINT:
				sequence_MobaMinConstraint(context, (MobaMinConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MIN_LENGTH_CONSTRAINT:
				sequence_MobaMinLengthConstraint(context, (MobaMinLengthConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MULIPLICITY:
				sequence_MobaMuliplicity(context, (MobaMuliplicity) semanticObject); 
				return; 
			case MobaPackage.MOBA_NOT_NULL_CONSTRAINT:
				sequence_MobaNotNullConstraint(context, (MobaNotNullConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_NULL_CONSTRAINT:
				sequence_MobaNullConstraint(context, (MobaNullConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_PROPERTY:
				sequence_MobaProperty(context, (MobaProperty) semanticObject); 
				return; 
			case MobaPackage.MOBA_QUEUE:
				sequence_MobaPropertiesAble_MobaQueue(context, (MobaQueue) semanticObject); 
				return; 
			case MobaPackage.MOBA_QUEUE_REFERENCE:
				sequence_MobaMultiplicityAble_MobaPropertiesAble_MobaQueueReference(context, (MobaQueueReference) semanticObject); 
				return; 
			case MobaPackage.MOBA_REGEXP_CONSTRAINT:
				sequence_MobaRegexpConstraint(context, (MobaRegexpConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_REST_CRUD:
				sequence_MobaPropertiesAble_MobaRestCrud(context, (MobaRestCrud) semanticObject); 
				return; 
			case MobaPackage.MOBA_REST_CUSTOM:
				sequence_MobaPropertiesAble_MobaRestCustom(context, (MobaRestCustom) semanticObject); 
				return; 
			case MobaPackage.MOBA_SETTINGS:
				sequence_MobaPropertiesAble_MobaSettings(context, (MobaSettings) semanticObject); 
				return; 
			case MobaPackage.MOBA_SETTINGS_ATTRIBUTE:
				sequence_MobaMultiplicityAble_MobaPropertiesAble_MobaSettingsAttribute(context, (MobaSettingsAttribute) semanticObject); 
				return; 
			case MobaPackage.MOBA_TEMPLATE:
				sequence_MobaTemplate(context, (MobaTemplate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MobaApplication returns MobaApplication
	 *
	 * Constraint:
	 *     (name=ID version=VERSION features+=MobaApplicationFeature*)
	 */
	protected void sequence_MobaApplication(ISerializationContext context, MobaApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaCache returns MobaCache
	 *
	 * Constraint:
	 *     (cacheTypeString=STRING | cacheTypeConst=[MobaConstant|ID] | cacheStrategyString=STRING | cacheStrategyConst=[MobaConstant|ID])*
	 */
	protected void sequence_MobaCache(ISerializationContext context, MobaCache semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstantValue returns MobaConstantValue
	 *
	 * Constraint:
	 *     ((valueString=STRING | valueInt=INT | valueDouble=DOUBLE | valueConst=[MobaConstant|ID]) tail=MobaConstantValue?)
	 */
	protected void sequence_MobaConstantValue(ISerializationContext context, MobaConstantValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaConstant
	 *     MobaConstant returns MobaConstant
	 *
	 * Constraint:
	 *     (name=ID valueAST=MobaConstantValue (properties+=MobaProperty properties+=MobaProperty*)?)
	 */
	protected void sequence_MobaConstant_MobaPropertiesAble(ISerializationContext context, MobaConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaDataType
	 *     MobaDataType returns MobaDataType
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         superType=[MobaDataType|ID]? 
	 *         (
	 *             (primitive?='isPrimitive' | array?='isArray' | enumAST=MobaEnum)? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)? 
	 *             ((date?='isDate' | time?='isTime' | timestamp?='isTimestamp') (dateFormatString=STRING | dateFormatConst=[MobaConstant|ID])?)?
	 *         )+ 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaDataType_MobaPropertiesAble(ISerializationContext context, MobaDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaDigitsConstraint
	 *     MobaDigitsConstraint returns MobaDigitsConstraint
	 *
	 * Constraint:
	 *     ((filterIntegerValue=INT | filterIntegerConst=[MobaConstant|ID]) (filterFractionValue=INT | filterFractionConst=[MobaConstant|ID]))
	 */
	protected void sequence_MobaDigitsConstraint(ISerializationContext context, MobaDigitsConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaDtoFeature returns MobaDtoAttribute
	 *     MobaDtoAttribute returns MobaDtoAttribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (lazy?='lazy' | transient?='transient' | domainKey?='domainKey' | domainDescription?='domainDescription' | alias=ID)? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)?
	 *         )+ 
	 *         type=[MobaDataType|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaDtoAttribute_MobaMultiplicityAble_MobaPropertiesAble(ISerializationContext context, MobaDtoAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaDtoFeature returns MobaDtoReference
	 *     MobaDtoReference returns MobaDtoReference
	 *
	 * Constraint:
	 *     (
	 *         (cascading?='cascading' | lazy?='lazy' | transient?='transient')* 
	 *         type=[MobaDto|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaDtoReference_MobaMultiplicityAble_MobaPropertiesAble(ISerializationContext context, MobaDtoReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaDto
	 *     MobaData returns MobaDto
	 *     MobaDto returns MobaDto
	 *
	 * Constraint:
	 *     (name=ID superType=[MobaDto|ID]? (properties+=MobaProperty properties+=MobaProperty*)? features+=MobaDtoFeature*)
	 */
	protected void sequence_MobaDto_MobaPropertiesAble(ISerializationContext context, MobaDto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEntityFeature returns MobaEntityAttribute
	 *     MobaEntityAttribute returns MobaEntityAttribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (lazy?='lazy' | transient?='transient' | domainKey?='domainKey' | domainDescription?='domainDescription')? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)?
	 *         )+ 
	 *         type=[MobaDataType|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaEntityAttribute_MobaMultiplicityAble_MobaPropertiesAble(ISerializationContext context, MobaEntityAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEntityIndex returns MobaEntityIndex
	 *
	 * Constraint:
	 *     (attributes+=[MobaEntityAttribute|ID] attributes+=[MobaEntityAttribute|ID]*)
	 */
	protected void sequence_MobaEntityIndex(ISerializationContext context, MobaEntityIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEntityFeature returns MobaEntityReference
	 *     MobaEntityReference returns MobaEntityReference
	 *
	 * Constraint:
	 *     (
	 *         (cascading?='cascading' | lazy?='lazy' | transient?='transient')* 
	 *         type=[MobaEntity|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaEntityReference_MobaMultiplicityAble_MobaPropertiesAble(ISerializationContext context, MobaEntityReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaEntity
	 *     MobaData returns MobaEntity
	 *     MobaEntity returns MobaEntity
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (superType=[MobaEntity|ID] | cache=MobaCache)* 
	 *         (properties+=MobaProperty properties+=MobaProperty*)? 
	 *         features+=MobaEntityFeature* 
	 *         index=MobaEntityIndex?
	 *     )
	 */
	protected void sequence_MobaEntity_MobaPropertiesAble(ISerializationContext context, MobaEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEnumLiteral returns MobaEnumLiteral
	 *
	 * Constraint:
	 *     (name=ID literal=STRING value=INT)
	 */
	protected void sequence_MobaEnumLiteral(ISerializationContext context, MobaEnumLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_ENUM_LITERAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_ENUM_LITERAL__NAME));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_ENUM_LITERAL__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_ENUM_LITERAL__LITERAL));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_ENUM_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_ENUM_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaEnumLiteralAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMobaEnumLiteralAccess().getLiteralSTRINGTerminalRuleCall_4_0(), semanticObject.getLiteral());
		feeder.accept(grammarAccess.getMobaEnumLiteralAccess().getValueINTTerminalRuleCall_6_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaEnum returns MobaEnum
	 *
	 * Constraint:
	 *     (name=ID literals+=MobaEnumLiteral literals+=MobaEnumLiteral*)
	 */
	protected void sequence_MobaEnum(ISerializationContext context, MobaEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaGeneratorFeature returns MobaGeneratorIDFeature
	 *     MobaGeneratorIDFeature returns MobaGeneratorIDFeature
	 *
	 * Constraint:
	 *     (generatorId=FQN generatorVersion=VERSION)
	 */
	protected void sequence_MobaGeneratorIDFeature(ISerializationContext context, MobaGeneratorIDFeature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_ID));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaGeneratorIDFeatureAccess().getGeneratorIdFQNTerminalRuleCall_1_0(), semanticObject.getGeneratorId());
		feeder.accept(grammarAccess.getMobaGeneratorIDFeatureAccess().getGeneratorVersionVERSIONTerminalRuleCall_3_0(), semanticObject.getGeneratorVersion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaGeneratorFeature returns MobaGeneratorMixinFeature
	 *     MobaGeneratorMixinFeature returns MobaGeneratorMixinFeature
	 *
	 * Constraint:
	 *     generatorRef=[MobaGenerator|ID_VERSION]
	 */
	protected void sequence_MobaGeneratorMixinFeature(ISerializationContext context, MobaGeneratorMixinFeature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_MIXIN_FEATURE__GENERATOR_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_MIXIN_FEATURE__GENERATOR_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaGeneratorMixinFeatureAccess().getGeneratorRefMobaGeneratorID_VERSIONTerminalRuleCall_1_0_1(), semanticObject.getGeneratorRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaGenerator
	 *     MobaGenerator returns MobaGenerator
	 *
	 * Constraint:
	 *     (active?='active'? name=ID features+=MobaGeneratorFeature*)
	 */
	protected void sequence_MobaGenerator(ISerializationContext context, MobaGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMaxConstraint
	 *     MobaMaxConstraint returns MobaMaxConstraint
	 *
	 * Constraint:
	 *     (filterValue=DOUBLE | filterConst=[MobaConstant|ID])
	 */
	protected void sequence_MobaMaxConstraint(ISerializationContext context, MobaMaxConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMaxLengthConstraint
	 *     MobaMaxLengthConstraint returns MobaMaxLengthConstraint
	 *
	 * Constraint:
	 *     (filterValue=INT | filterConst=[MobaConstant|ID])
	 */
	protected void sequence_MobaMaxLengthConstraint(ISerializationContext context, MobaMaxLengthConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMinConstraint
	 *     MobaMinConstraint returns MobaMinConstraint
	 *
	 * Constraint:
	 *     (filterValue=DOUBLE | filterConst=[MobaConstant|ID])
	 */
	protected void sequence_MobaMinConstraint(ISerializationContext context, MobaMinConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMinLengthConstraint
	 *     MobaMinLengthConstraint returns MobaMinLengthConstraint
	 *
	 * Constraint:
	 *     (filterValue=INT | filterConst=[MobaConstant|ID])
	 */
	protected void sequence_MobaMinLengthConstraint(ISerializationContext context, MobaMinLengthConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaMuliplicity returns MobaMuliplicity
	 *
	 * Constraint:
	 *     (lower=MobaLowerBound upper=MobaUpperBound?)
	 */
	protected void sequence_MobaMuliplicity(ISerializationContext context, MobaMuliplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaQueueFeature returns MobaQueueReference
	 *     MobaQueueReference returns MobaQueueReference
	 *
	 * Constraint:
	 *     (
	 *         (cascading?='cascading' | lazy?='lazy' | transient?='transient')* 
	 *         type=[MobaData|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaMultiplicityAble_MobaPropertiesAble_MobaQueueReference(ISerializationContext context, MobaQueueReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaSettingsFeature returns MobaSettingsAttribute
	 *     MobaSettingsAttribute returns MobaSettingsAttribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (lazy?='lazy' | transient?='transient' | domainKey?='domainKey' | domainDescription?='domainDescription')? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)?
	 *         )+ 
	 *         type=[MobaDataType|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         (properties+=MobaProperty properties+=MobaProperty*)?
	 *     )
	 */
	protected void sequence_MobaMultiplicityAble_MobaPropertiesAble_MobaSettingsAttribute(ISerializationContext context, MobaSettingsAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaNotNullConstraint
	 *     MobaNotNullConstraint returns MobaNotNullConstraint
	 *
	 * Constraint:
	 *     {MobaNotNullConstraint}
	 */
	protected void sequence_MobaNotNullConstraint(ISerializationContext context, MobaNotNullConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaNullConstraint
	 *     MobaNullConstraint returns MobaNullConstraint
	 *
	 * Constraint:
	 *     {MobaNullConstraint}
	 */
	protected void sequence_MobaNullConstraint(ISerializationContext context, MobaNullConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaQueue
	 *     MobaData returns MobaQueue
	 *     MobaQueue returns MobaQueue
	 *
	 * Constraint:
	 *     (name=ID superType=[MobaQueue|ID]? (properties+=MobaProperty properties+=MobaProperty*)? features+=MobaQueueFeature*)
	 */
	protected void sequence_MobaPropertiesAble_MobaQueue(ISerializationContext context, MobaQueue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaRestCrud
	 *     MobaService returns MobaRestCrud
	 *     MobaRestCrud returns MobaRestCrud
	 *
	 * Constraint:
	 *     (name=ID (properties+=MobaProperty properties+=MobaProperty*)?)
	 */
	protected void sequence_MobaPropertiesAble_MobaRestCrud(ISerializationContext context, MobaRestCrud semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaRestCustom
	 *     MobaService returns MobaRestCustom
	 *     MobaRestCustom returns MobaRestCustom
	 *
	 * Constraint:
	 *     (name=ID (properties+=MobaProperty properties+=MobaProperty*)?)
	 */
	protected void sequence_MobaPropertiesAble_MobaRestCustom(ISerializationContext context, MobaRestCustom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaSettings
	 *     MobaSettings returns MobaSettings
	 *
	 * Constraint:
	 *     (active?='active'? name=ID superType=[MobaSettings|ID]? (properties+=MobaProperty properties+=MobaProperty*)? features+=MobaSettingsFeature*)
	 */
	protected void sequence_MobaPropertiesAble_MobaSettings(ISerializationContext context, MobaSettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaProperty returns MobaProperty
	 *
	 * Constraint:
	 *     ((keyString=STRING | keyConst=[MobaConstant|ID]) (valueString=STRING | valueConst=[MobaConstant|ID]))
	 */
	protected void sequence_MobaProperty(ISerializationContext context, MobaProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaRegexpConstraint
	 *     MobaRegexpConstraint returns MobaRegexpConstraint
	 *
	 * Constraint:
	 *     (filterString=STRING | filterConst=[MobaConstant|ID])
	 */
	protected void sequence_MobaRegexpConstraint(ISerializationContext context, MobaRegexpConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaTemplate
	 *     MobaTemplate returns MobaTemplate
	 *
	 * Constraint:
	 *     (template=[MobaApplication|ID_VERSION] | downloadTemplate=DOWNLOAD_TEMPLATE)
	 */
	protected void sequence_MobaTemplate(ISerializationContext context, MobaTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
