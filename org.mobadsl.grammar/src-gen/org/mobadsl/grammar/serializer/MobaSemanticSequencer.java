/*
 * generated by Xtext 2.9.1
 */
package org.mobadsl.grammar.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mobadsl.grammar.services.MobaGrammarAccess;
import org.mobadsl.semantic.model.moba.MobaAppInstallTrigger;
import org.mobadsl.semantic.model.moba.MobaAppUpdateTrigger;
import org.mobadsl.semantic.model.moba.MobaApplication;
import org.mobadsl.semantic.model.moba.MobaAuthorization;
import org.mobadsl.semantic.model.moba.MobaBluetoothModule;
import org.mobadsl.semantic.model.moba.MobaCache;
import org.mobadsl.semantic.model.moba.MobaConstant;
import org.mobadsl.semantic.model.moba.MobaConstantValue;
import org.mobadsl.semantic.model.moba.MobaDataType;
import org.mobadsl.semantic.model.moba.MobaDeviceStartupTrigger;
import org.mobadsl.semantic.model.moba.MobaDigitsConstraint;
import org.mobadsl.semantic.model.moba.MobaDto;
import org.mobadsl.semantic.model.moba.MobaDtoAttribute;
import org.mobadsl.semantic.model.moba.MobaDtoReference;
import org.mobadsl.semantic.model.moba.MobaEmailTrigger;
import org.mobadsl.semantic.model.moba.MobaEntity;
import org.mobadsl.semantic.model.moba.MobaEntityAttribute;
import org.mobadsl.semantic.model.moba.MobaEntityIndex;
import org.mobadsl.semantic.model.moba.MobaEntityReference;
import org.mobadsl.semantic.model.moba.MobaEnum;
import org.mobadsl.semantic.model.moba.MobaEnumLiteral;
import org.mobadsl.semantic.model.moba.MobaFriend;
import org.mobadsl.semantic.model.moba.MobaGenerator;
import org.mobadsl.semantic.model.moba.MobaGeneratorIDFeature;
import org.mobadsl.semantic.model.moba.MobaGeneratorMixinFeature;
import org.mobadsl.semantic.model.moba.MobaGeneratorSlot;
import org.mobadsl.semantic.model.moba.MobaGeofenceTrigger;
import org.mobadsl.semantic.model.moba.MobaMaxConstraint;
import org.mobadsl.semantic.model.moba.MobaMaxLengthConstraint;
import org.mobadsl.semantic.model.moba.MobaMinConstraint;
import org.mobadsl.semantic.model.moba.MobaMinLengthConstraint;
import org.mobadsl.semantic.model.moba.MobaModel;
import org.mobadsl.semantic.model.moba.MobaMuliplicity;
import org.mobadsl.semantic.model.moba.MobaNFCModule;
import org.mobadsl.semantic.model.moba.MobaNotNullConstraint;
import org.mobadsl.semantic.model.moba.MobaNullConstraint;
import org.mobadsl.semantic.model.moba.MobaPackage;
import org.mobadsl.semantic.model.moba.MobaProject;
import org.mobadsl.semantic.model.moba.MobaProperty;
import org.mobadsl.semantic.model.moba.MobaPushModule;
import org.mobadsl.semantic.model.moba.MobaPushTrigger;
import org.mobadsl.semantic.model.moba.MobaQueue;
import org.mobadsl.semantic.model.moba.MobaQueueReference;
import org.mobadsl.semantic.model.moba.MobaRESTAttribute;
import org.mobadsl.semantic.model.moba.MobaRESTCrud;
import org.mobadsl.semantic.model.moba.MobaRESTCustomService;
import org.mobadsl.semantic.model.moba.MobaRESTPayloadDefinition;
import org.mobadsl.semantic.model.moba.MobaRESTWorkflow;
import org.mobadsl.semantic.model.moba.MobaRegexpConstraint;
import org.mobadsl.semantic.model.moba.MobaSMSTrigger;
import org.mobadsl.semantic.model.moba.MobaServer;
import org.mobadsl.semantic.model.moba.MobaSettings;
import org.mobadsl.semantic.model.moba.MobaSettingsAttribute;
import org.mobadsl.semantic.model.moba.MobaTemplate;
import org.mobadsl.semantic.model.moba.MobaTransportSerializationType;

@SuppressWarnings("all")
public class MobaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MobaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MobaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MobaPackage.MOBA_APP_INSTALL_TRIGGER:
				sequence_MobaAppInstallTrigger(context, (MobaAppInstallTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_APP_UPDATE_TRIGGER:
				sequence_MobaAppUpdateTrigger(context, (MobaAppUpdateTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_APPLICATION:
				sequence_MobaApplication_MobaFriendsAble(context, (MobaApplication) semanticObject); 
				return; 
			case MobaPackage.MOBA_AUTHORIZATION:
				sequence_MobaAuthorization_MobaFriendsAble(context, (MobaAuthorization) semanticObject); 
				return; 
			case MobaPackage.MOBA_BLUETOOTH_MODULE:
				sequence_MobaBluetoothModule(context, (MobaBluetoothModule) semanticObject); 
				return; 
			case MobaPackage.MOBA_CACHE:
				sequence_MobaCache(context, (MobaCache) semanticObject); 
				return; 
			case MobaPackage.MOBA_CONSTANT:
				sequence_MobaConstant_MobaFriendsAble(context, (MobaConstant) semanticObject); 
				return; 
			case MobaPackage.MOBA_CONSTANT_VALUE:
				sequence_MobaConstantValue(context, (MobaConstantValue) semanticObject); 
				return; 
			case MobaPackage.MOBA_DATA_TYPE:
				sequence_MobaDataType_MobaFriendsAble(context, (MobaDataType) semanticObject); 
				return; 
			case MobaPackage.MOBA_DEVICE_STARTUP_TRIGGER:
				sequence_MobaDeviceStartupTrigger(context, (MobaDeviceStartupTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_DIGITS_CONSTRAINT:
				sequence_MobaDigitsConstraint(context, (MobaDigitsConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_DTO:
				sequence_MobaDto_MobaFriendsAble(context, (MobaDto) semanticObject); 
				return; 
			case MobaPackage.MOBA_DTO_ATTRIBUTE:
				sequence_MobaDtoAttribute_MobaFriendsAble_MobaMultiplicityAble(context, (MobaDtoAttribute) semanticObject); 
				return; 
			case MobaPackage.MOBA_DTO_REFERENCE:
				sequence_MobaDtoReference_MobaFriendsAble_MobaMultiplicityAble(context, (MobaDtoReference) semanticObject); 
				return; 
			case MobaPackage.MOBA_EMAIL_TRIGGER:
				sequence_MobaEmailTrigger(context, (MobaEmailTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY:
				sequence_MobaEntity_MobaFriendsAble(context, (MobaEntity) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY_ATTRIBUTE:
				sequence_MobaEntityAttribute_MobaFriendsAble_MobaMultiplicityAble(context, (MobaEntityAttribute) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY_INDEX:
				sequence_MobaEntityIndex(context, (MobaEntityIndex) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENTITY_REFERENCE:
				sequence_MobaEntityReference_MobaFriendsAble_MobaMultiplicityAble(context, (MobaEntityReference) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENUM:
				sequence_MobaEnum(context, (MobaEnum) semanticObject); 
				return; 
			case MobaPackage.MOBA_ENUM_LITERAL:
				sequence_MobaEnumLiteral(context, (MobaEnumLiteral) semanticObject); 
				return; 
			case MobaPackage.MOBA_FRIEND:
				sequence_MobaFriend(context, (MobaFriend) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR:
				sequence_MobaGenerator(context, (MobaGenerator) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR_ID_FEATURE:
				sequence_MobaGeneratorIDFeature(context, (MobaGeneratorIDFeature) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR_MIXIN_FEATURE:
				sequence_MobaGeneratorMixinFeature(context, (MobaGeneratorMixinFeature) semanticObject); 
				return; 
			case MobaPackage.MOBA_GENERATOR_SLOT:
				sequence_MobaGeneratorSlot(context, (MobaGeneratorSlot) semanticObject); 
				return; 
			case MobaPackage.MOBA_GEOFENCE_TRIGGER:
				sequence_MobaGeofenceTrigger(context, (MobaGeofenceTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_MAX_CONSTRAINT:
				sequence_MobaMaxConstraint(context, (MobaMaxConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MAX_LENGTH_CONSTRAINT:
				sequence_MobaMaxLengthConstraint(context, (MobaMaxLengthConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MIN_CONSTRAINT:
				sequence_MobaMinConstraint(context, (MobaMinConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MIN_LENGTH_CONSTRAINT:
				sequence_MobaMinLengthConstraint(context, (MobaMinLengthConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_MODEL:
				sequence_MobaModel(context, (MobaModel) semanticObject); 
				return; 
			case MobaPackage.MOBA_MULIPLICITY:
				sequence_MobaMuliplicity(context, (MobaMuliplicity) semanticObject); 
				return; 
			case MobaPackage.MOBA_NFC_MODULE:
				sequence_MobaNFCModule(context, (MobaNFCModule) semanticObject); 
				return; 
			case MobaPackage.MOBA_NOT_NULL_CONSTRAINT:
				sequence_MobaNotNullConstraint(context, (MobaNotNullConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_NULL_CONSTRAINT:
				sequence_MobaNullConstraint(context, (MobaNullConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_PROJECT:
				sequence_MobaFriendsAble_MobaProject(context, (MobaProject) semanticObject); 
				return; 
			case MobaPackage.MOBA_PROPERTY:
				sequence_MobaProperty(context, (MobaProperty) semanticObject); 
				return; 
			case MobaPackage.MOBA_PUSH_MODULE:
				sequence_MobaPushModule(context, (MobaPushModule) semanticObject); 
				return; 
			case MobaPackage.MOBA_PUSH_TRIGGER:
				sequence_MobaPushTrigger(context, (MobaPushTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_QUEUE:
				sequence_MobaFriendsAble_MobaQueue(context, (MobaQueue) semanticObject); 
				return; 
			case MobaPackage.MOBA_QUEUE_REFERENCE:
				sequence_MobaFriendsAble_MobaMultiplicityAble_MobaQueueReference(context, (MobaQueueReference) semanticObject); 
				return; 
			case MobaPackage.MOBA_REST_ATTRIBUTE:
				if (rule == grammarAccess.getMobaRestHeaderRule()) {
					sequence_MobaRestHeader(context, (MobaRESTAttribute) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMobaRestParameterRule()) {
					sequence_MobaRestParameter(context, (MobaRESTAttribute) semanticObject); 
					return; 
				}
				else break;
			case MobaPackage.MOBA_REST_CRUD:
				sequence_MobaFriendsAble_MobaRESTCrud(context, (MobaRESTCrud) semanticObject); 
				return; 
			case MobaPackage.MOBA_REST_CUSTOM_SERVICE:
				sequence_MobaFriendsAble_MobaRESTCustomService(context, (MobaRESTCustomService) semanticObject); 
				return; 
			case MobaPackage.MOBA_REST_PAYLOAD_DEFINITION:
				sequence_MobaRESTPayloadDefinition(context, (MobaRESTPayloadDefinition) semanticObject); 
				return; 
			case MobaPackage.MOBA_REST_WORKFLOW:
				sequence_MobaFriendsAble_MobaRESTWorkflow(context, (MobaRESTWorkflow) semanticObject); 
				return; 
			case MobaPackage.MOBA_REGEXP_CONSTRAINT:
				sequence_MobaRegexpConstraint(context, (MobaRegexpConstraint) semanticObject); 
				return; 
			case MobaPackage.MOBA_SMS_TRIGGER:
				sequence_MobaSMSTrigger(context, (MobaSMSTrigger) semanticObject); 
				return; 
			case MobaPackage.MOBA_SERVER:
				sequence_MobaFriendsAble_MobaServer(context, (MobaServer) semanticObject); 
				return; 
			case MobaPackage.MOBA_SETTINGS:
				sequence_MobaFriendsAble_MobaSettings(context, (MobaSettings) semanticObject); 
				return; 
			case MobaPackage.MOBA_SETTINGS_ATTRIBUTE:
				sequence_MobaFriendsAble_MobaMultiplicityAble_MobaSettingsAttribute(context, (MobaSettingsAttribute) semanticObject); 
				return; 
			case MobaPackage.MOBA_TEMPLATE:
				sequence_MobaTemplate(context, (MobaTemplate) semanticObject); 
				return; 
			case MobaPackage.MOBA_TRANSPORT_SERIALIZATION_TYPE:
				sequence_MobaFriendsAble_MobaTransportSerializationType(context, (MobaTransportSerializationType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaAppInstallTrigger
	 *     MobaTrigger returns MobaAppInstallTrigger
	 *     MobaAppInstallTrigger returns MobaAppInstallTrigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaAppInstallTrigger(ISerializationContext context, MobaAppInstallTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaAppInstallTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaAppUpdateTrigger
	 *     MobaTrigger returns MobaAppUpdateTrigger
	 *     MobaAppUpdateTrigger returns MobaAppUpdateTrigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaAppUpdateTrigger(ISerializationContext context, MobaAppUpdateTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaAppUpdateTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaModelFeature returns MobaApplication
	 *     MobaApplication returns MobaApplication
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         version=VERSION 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         features+=MobaApplicationFeature*
	 *     )
	 */
	protected void sequence_MobaApplication_MobaFriendsAble(ISerializationContext context, MobaApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaAuthorization
	 *     MobaAuthorization returns MobaAuthorization
	 *
	 * Constraint:
	 *     (name=CONSTANT ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*)
	 */
	protected void sequence_MobaAuthorization_MobaFriendsAble(ISerializationContext context, MobaAuthorization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaBluetoothModule
	 *     MobaExternalModule returns MobaBluetoothModule
	 *     MobaBluetoothModule returns MobaBluetoothModule
	 *
	 * Constraint:
	 *     (name=ID type=MobaBlueToothModuleType)
	 */
	protected void sequence_MobaBluetoothModule(ISerializationContext context, MobaBluetoothModule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_EXTERNAL_MODULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_EXTERNAL_MODULE__NAME));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_BLUETOOTH_MODULE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_BLUETOOTH_MODULE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaBluetoothModuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMobaBluetoothModuleAccess().getTypeMobaBlueToothModuleTypeEnumRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaCache returns MobaCache
	 *
	 * Constraint:
	 *     (cacheTypeString=STRING | cacheTypeConst=[MobaConstant|ID] | cacheStrategyString=STRING | cacheStrategyConst=[MobaConstant|ID])*
	 */
	protected void sequence_MobaCache(ISerializationContext context, MobaCache semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstantValue returns MobaConstantValue
	 *
	 * Constraint:
	 *     (
	 *         (valueString=STRING | valueInt=INT | valueDouble=DOUBLE | (valueConst=[MobaConstant|CONSTANT] valueConstFunctions+=MobaConstantValueFunction*)) 
	 *         tail=MobaConstantValue?
	 *     )
	 */
	protected void sequence_MobaConstantValue(ISerializationContext context, MobaConstantValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaConstant
	 *     MobaConstant returns MobaConstant
	 *
	 * Constraint:
	 *     (name=CONSTANT valueAST=MobaConstantValue ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*)
	 */
	protected void sequence_MobaConstant_MobaFriendsAble(ISerializationContext context, MobaConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaDataType
	 *     MobaDataType returns MobaDataType
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         superType=[MobaDataType|ID]? 
	 *         (
	 *             (array?='isArray' | enumAST=MobaEnum)? 
	 *             (string?='isString' primitive?='isPrimitive'?)? 
	 *             (numeric?='isNumeric' primitive?='isPrimitive'?)? 
	 *             (decimal?='isDecimal' primitive?='isPrimitive'?)? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)? 
	 *             ((date?='isDate' | time?='isTime' | timestamp?='isTimestamp') (dateFormatString=STRING | dateFormatConst=[MobaConstant|CONSTANT])?)?
	 *         )+ 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaDataType_MobaFriendsAble(ISerializationContext context, MobaDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaDeviceStartupTrigger
	 *     MobaTrigger returns MobaDeviceStartupTrigger
	 *     MobaDeviceStartupTrigger returns MobaDeviceStartupTrigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaDeviceStartupTrigger(ISerializationContext context, MobaDeviceStartupTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaDeviceStartupTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaDigitsConstraint
	 *     MobaDigitsConstraint returns MobaDigitsConstraint
	 *
	 * Constraint:
	 *     ((filterIntegerValue=INT | filterIntegerConst=[MobaConstant|CONSTANT]) (filterFractionValue=INT | filterFractionConst=[MobaConstant|CONSTANT]))
	 */
	protected void sequence_MobaDigitsConstraint(ISerializationContext context, MobaDigitsConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaDtoFeature returns MobaDtoAttribute
	 *     MobaDtoAttribute returns MobaDtoAttribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (lazy?='lazy' | transient?='transient' | domainKey?='domainKey' | domainDescription?='domainDescription' | alias=ID)? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)?
	 *         )+ 
	 *         type=[MobaDataType|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaDtoAttribute_MobaFriendsAble_MobaMultiplicityAble(ISerializationContext context, MobaDtoAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaDtoFeature returns MobaDtoReference
	 *     MobaDtoReference returns MobaDtoReference
	 *
	 * Constraint:
	 *     (
	 *         (cascading?='cascading' | lazy?='lazy' | transient?='transient')* 
	 *         type=[MobaDto|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaDtoReference_MobaFriendsAble_MobaMultiplicityAble(ISerializationContext context, MobaDtoReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaDto
	 *     MobaData returns MobaDto
	 *     MobaDto returns MobaDto
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         superType=[MobaDto|ID]? 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         features+=MobaDtoFeature*
	 *     )
	 */
	protected void sequence_MobaDto_MobaFriendsAble(ISerializationContext context, MobaDto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaEmailTrigger
	 *     MobaTrigger returns MobaEmailTrigger
	 *     MobaEmailTrigger returns MobaEmailTrigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaEmailTrigger(ISerializationContext context, MobaEmailTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaEmailTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaEntityFeature returns MobaEntityAttribute
	 *     MobaEntityAttribute returns MobaEntityAttribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (lazy?='lazy' | transient?='transient' | domainKey?='domainKey' | domainDescription?='domainDescription')? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)?
	 *         )+ 
	 *         type=[MobaDataType|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaEntityAttribute_MobaFriendsAble_MobaMultiplicityAble(ISerializationContext context, MobaEntityAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEntityIndex returns MobaEntityIndex
	 *
	 * Constraint:
	 *     (attributes+=[MobaEntityAttribute|ID] attributes+=[MobaEntityAttribute|ID]*)
	 */
	protected void sequence_MobaEntityIndex(ISerializationContext context, MobaEntityIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEntityFeature returns MobaEntityReference
	 *     MobaEntityReference returns MobaEntityReference
	 *
	 * Constraint:
	 *     (
	 *         (cascading?='cascading' | lazy?='lazy' | transient?='transient')* 
	 *         type=[MobaEntity|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaEntityReference_MobaFriendsAble_MobaMultiplicityAble(ISerializationContext context, MobaEntityReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaEntity
	 *     MobaData returns MobaEntity
	 *     MobaEntity returns MobaEntity
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (superType=[MobaEntity|ID] | cache=MobaCache)* 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         features+=MobaEntityFeature* 
	 *         index=MobaEntityIndex?
	 *     )
	 */
	protected void sequence_MobaEntity_MobaFriendsAble(ISerializationContext context, MobaEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEnumLiteral returns MobaEnumLiteral
	 *
	 * Constraint:
	 *     (name=CONSTANT literal=STRING value=INT (default?='isDefault' | undefined?='isUndefined')*)
	 */
	protected void sequence_MobaEnumLiteral(ISerializationContext context, MobaEnumLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaEnum returns MobaEnum
	 *
	 * Constraint:
	 *     literals+=MobaEnumLiteral*
	 */
	protected void sequence_MobaEnum(ISerializationContext context, MobaEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaFriend returns MobaFriend
	 *
	 * Constraint:
	 *     (valueString=STRING | valueConst=[MobaConstant|CONSTANT])
	 */
	protected void sequence_MobaFriend(ISerializationContext context, MobaFriend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaQueueFeature returns MobaQueueReference
	 *     MobaQueueReference returns MobaQueueReference
	 *
	 * Constraint:
	 *     (
	 *         (cascading?='cascading' | lazy?='lazy' | transient?='transient')* 
	 *         type=[MobaData|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaMultiplicityAble_MobaQueueReference(ISerializationContext context, MobaQueueReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaSettingsFeature returns MobaSettingsAttribute
	 *     MobaSettingsAttribute returns MobaSettingsAttribute
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (lazy?='lazy' | transient?='transient' | domainKey?='domainKey' | domainDescription?='domainDescription')? 
	 *             (constraints+=MobaConstraint constraints+=MobaConstraint*)?
	 *         )+ 
	 *         type=[MobaDataType|ID] 
	 *         multiplicity=MobaMuliplicity? 
	 *         name=ID 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaMultiplicityAble_MobaSettingsAttribute(ISerializationContext context, MobaSettingsAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaModelFeature returns MobaProject
	 *     MobaProject returns MobaProject
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         version=VERSION 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         (uiApplication=[MobaApplication|ID_VERSION] | backgroundApplication=[MobaApplication|ID_VERSION])*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaProject(ISerializationContext context, MobaProject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaQueue
	 *     MobaData returns MobaQueue
	 *     MobaQueue returns MobaQueue
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         superType=[MobaQueue|ID]? 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         features+=MobaQueueFeature*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaQueue(ISerializationContext context, MobaQueue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaRESTCrud
	 *     MobaREST returns MobaRESTCrud
	 *     MobaRESTCrud returns MobaRESTCrud
	 *
	 * Constraint:
	 *     (name=ID superType=[MobaRESTCrud|ID]? ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*)
	 */
	protected void sequence_MobaFriendsAble_MobaRESTCrud(ISerializationContext context, MobaRESTCrud semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaRESTCustomService
	 *     MobaREST returns MobaRESTCustomService
	 *     MobaRESTCustomService returns MobaRESTCustomService
	 *
	 * Constraint:
	 *     (
	 *         bigData?='bigData'? 
	 *         name=ID 
	 *         superType=[MobaRESTCustomService|ID]? 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         (
	 *             headers+=MobaRestHeader | 
	 *             parameters+=MobaRestParameter | 
	 *             requestDto=MobaRESTPayloadDefinition | 
	 *             responseDto=MobaRESTPayloadDefinition | 
	 *             errorDto=MobaRESTPayloadDefinition | 
	 *             operation=MobaRESTMethods
	 *         )*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaRESTCustomService(ISerializationContext context, MobaRESTCustomService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaRESTWorkflow
	 *     MobaREST returns MobaRESTWorkflow
	 *     MobaRESTWorkflow returns MobaRESTWorkflow
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         superType=[MobaRESTWorkflow|ID]? 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         services+=[MobaREST|ID]*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaRESTWorkflow(ISerializationContext context, MobaRESTWorkflow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaServer
	 *     MobaServer returns MobaServer
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (urlString=STRING | urlConst=[MobaConstant|CONSTANT]) 
	 *         superType=[MobaServer|ID]? 
	 *         (properties+=MobaProperty properties+=MobaProperty*)? 
	 *         ((friends+=MobaFriend friends+=MobaFriend*)? (properties+=MobaProperty properties+=MobaProperty*)?)* 
	 *         ((authorization+=[MobaAuthorization|CONSTANT] authorization+=[MobaAuthorization|CONSTANT]*) | (services+=[MobaREST|ID] services+=[MobaREST|ID]*))*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaServer(ISerializationContext context, MobaServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaSettings
	 *     MobaSettings returns MobaSettings
	 *
	 * Constraint:
	 *     (
	 *         active?='active'? 
	 *         name=ID 
	 *         superType=[MobaSettings|ID]? 
	 *         ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))* 
	 *         features+=MobaSettingsFeature*
	 *     )
	 */
	protected void sequence_MobaFriendsAble_MobaSettings(ISerializationContext context, MobaSettings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaTransportSerializationType
	 *     MobaTransportSerializationType returns MobaTransportSerializationType
	 *
	 * Constraint:
	 *     (name=CONSTANT ((friends+=MobaFriend friends+=MobaFriend*) | (properties+=MobaProperty properties+=MobaProperty*))*)
	 */
	protected void sequence_MobaFriendsAble_MobaTransportSerializationType(ISerializationContext context, MobaTransportSerializationType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaGeneratorFeature returns MobaGeneratorIDFeature
	 *     MobaGeneratorIDFeature returns MobaGeneratorIDFeature
	 *
	 * Constraint:
	 *     (generatorId=FQN generatorVersion=VERSION)
	 */
	protected void sequence_MobaGeneratorIDFeature(ISerializationContext context, MobaGeneratorIDFeature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_ID));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_ID_FEATURE__GENERATOR_VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaGeneratorIDFeatureAccess().getGeneratorIdFQNTerminalRuleCall_1_0(), semanticObject.getGeneratorId());
		feeder.accept(grammarAccess.getMobaGeneratorIDFeatureAccess().getGeneratorVersionVERSIONTerminalRuleCall_3_0(), semanticObject.getGeneratorVersion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaGeneratorFeature returns MobaGeneratorMixinFeature
	 *     MobaGeneratorMixinFeature returns MobaGeneratorMixinFeature
	 *
	 * Constraint:
	 *     generatorRef=[MobaGenerator|ID_VERSION]
	 */
	protected void sequence_MobaGeneratorMixinFeature(ISerializationContext context, MobaGeneratorMixinFeature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_MIXIN_FEATURE__GENERATOR_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GENERATOR_MIXIN_FEATURE__GENERATOR_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaGeneratorMixinFeatureAccess().getGeneratorRefMobaGeneratorID_VERSIONTerminalRuleCall_1_0_1(), semanticObject.getGeneratorRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaGeneratorSlot
	 *     MobaGeneratorSlot returns MobaGeneratorSlot
	 *
	 * Constraint:
	 *     (name=ID type=STRING?)
	 */
	protected void sequence_MobaGeneratorSlot(ISerializationContext context, MobaGeneratorSlot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaGenerator
	 *     MobaGenerator returns MobaGenerator
	 *
	 * Constraint:
	 *     (active?='active'? name=ID features+=MobaGeneratorFeature*)
	 */
	protected void sequence_MobaGenerator(ISerializationContext context, MobaGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaGeofenceTrigger
	 *     MobaTrigger returns MobaGeofenceTrigger
	 *     MobaGeofenceTrigger returns MobaGeofenceTrigger
	 *
	 * Constraint:
	 *     (name=ID eventType=MobaGeofenceEvent)
	 */
	protected void sequence_MobaGeofenceTrigger(ISerializationContext context, MobaGeofenceTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_GEOFENCE_TRIGGER__EVENT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_GEOFENCE_TRIGGER__EVENT_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaGeofenceTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMobaGeofenceTriggerAccess().getEventTypeMobaGeofenceEventEnumRuleCall_4_0(), semanticObject.getEventType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMaxConstraint
	 *     MobaMaxConstraint returns MobaMaxConstraint
	 *
	 * Constraint:
	 *     (filterValue=DOUBLE | filterConst=[MobaConstant|CONSTANT])
	 */
	protected void sequence_MobaMaxConstraint(ISerializationContext context, MobaMaxConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMaxLengthConstraint
	 *     MobaMaxLengthConstraint returns MobaMaxLengthConstraint
	 *
	 * Constraint:
	 *     (filterValue=INT | filterConst=[MobaConstant|CONSTANT])
	 */
	protected void sequence_MobaMaxLengthConstraint(ISerializationContext context, MobaMaxLengthConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMinConstraint
	 *     MobaMinConstraint returns MobaMinConstraint
	 *
	 * Constraint:
	 *     (filterValue=DOUBLE | filterConst=[MobaConstant|CONSTANT])
	 */
	protected void sequence_MobaMinConstraint(ISerializationContext context, MobaMinConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaMinLengthConstraint
	 *     MobaMinLengthConstraint returns MobaMinLengthConstraint
	 *
	 * Constraint:
	 *     (filterValue=INT | filterConst=[MobaConstant|CONSTANT])
	 */
	protected void sequence_MobaMinLengthConstraint(ISerializationContext context, MobaMinLengthConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaModel returns MobaModel
	 *
	 * Constraint:
	 *     features+=MobaModelFeature+
	 */
	protected void sequence_MobaModel(ISerializationContext context, MobaModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaMuliplicity returns MobaMuliplicity
	 *
	 * Constraint:
	 *     (lower=MobaLowerBound upper=MobaUpperBound?)
	 */
	protected void sequence_MobaMuliplicity(ISerializationContext context, MobaMuliplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaNFCModule
	 *     MobaExternalModule returns MobaNFCModule
	 *     MobaNFCModule returns MobaNFCModule
	 *
	 * Constraint:
	 *     (name=ID type=MobaNFCModuleType)
	 */
	protected void sequence_MobaNFCModule(ISerializationContext context, MobaNFCModule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_EXTERNAL_MODULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_EXTERNAL_MODULE__NAME));
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_NFC_MODULE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_NFC_MODULE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaNFCModuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMobaNFCModuleAccess().getTypeMobaNFCModuleTypeEnumRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaNotNullConstraint
	 *     MobaNotNullConstraint returns MobaNotNullConstraint
	 *
	 * Constraint:
	 *     {MobaNotNullConstraint}
	 */
	protected void sequence_MobaNotNullConstraint(ISerializationContext context, MobaNotNullConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaNullConstraint
	 *     MobaNullConstraint returns MobaNullConstraint
	 *
	 * Constraint:
	 *     {MobaNullConstraint}
	 */
	protected void sequence_MobaNullConstraint(ISerializationContext context, MobaNullConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaProperty returns MobaProperty
	 *
	 * Constraint:
	 *     ((keyString=STRING | keyConst=[MobaConstant|CONSTANT]) (valueString=STRING | valueConst=[MobaConstant|CONSTANT]))
	 */
	protected void sequence_MobaProperty(ISerializationContext context, MobaProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaPushModule
	 *     MobaExternalModule returns MobaPushModule
	 *     MobaPushModule returns MobaPushModule
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaPushModule(ISerializationContext context, MobaPushModule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_EXTERNAL_MODULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_EXTERNAL_MODULE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaPushModuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaPushTrigger
	 *     MobaTrigger returns MobaPushTrigger
	 *     MobaPushTrigger returns MobaPushTrigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaPushTrigger(ISerializationContext context, MobaPushTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaPushTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaRESTPayloadDefinition returns MobaRESTPayloadDefinition
	 *
	 * Constraint:
	 *     (dto=[MobaDto|ID] (array?='isArray' | serializationType=[MobaTransportSerializationType|CONSTANT])*)
	 */
	protected void sequence_MobaRESTPayloadDefinition(ISerializationContext context, MobaRESTPayloadDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaConstraint returns MobaRegexpConstraint
	 *     MobaRegexpConstraint returns MobaRegexpConstraint
	 *
	 * Constraint:
	 *     (filterString=STRING | filterConst=[MobaConstant|CONSTANT])
	 */
	protected void sequence_MobaRegexpConstraint(ISerializationContext context, MobaRegexpConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaRestHeader returns MobaRESTAttribute
	 *
	 * Constraint:
	 *     (
	 *         type=[MobaDataType|ID] 
	 *         (nameString=ID | nameConst=[MobaConstant|CONSTANT]) 
	 *         (valueString=STRING | valueInt=INT | valueDouble=DOUBLE | valueConst=[MobaConstant|CONSTANT])?
	 *     )
	 */
	protected void sequence_MobaRestHeader(ISerializationContext context, MobaRESTAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaRestParameter returns MobaRESTAttribute
	 *
	 * Constraint:
	 *     (
	 *         type=[MobaDataType|ID] 
	 *         (nameString=ID | nameConst=[MobaConstant|CONSTANT]) 
	 *         (valueString=STRING | valueInt=INT | valueDouble=DOUBLE | valueConst=[MobaConstant|CONSTANT])?
	 *     )
	 */
	protected void sequence_MobaRestParameter(ISerializationContext context, MobaRESTAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaSMSTrigger
	 *     MobaTrigger returns MobaSMSTrigger
	 *     MobaSMSTrigger returns MobaSMSTrigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MobaSMSTrigger(ISerializationContext context, MobaSMSTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MobaPackage.Literals.MOBA_TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMobaSMSTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MobaApplicationFeature returns MobaTemplate
	 *     MobaTemplate returns MobaTemplate
	 *
	 * Constraint:
	 *     (template=[MobaApplication|ID_VERSION] | downloadTemplate=DOWNLOAD_TEMPLATE)
	 */
	protected void sequence_MobaTemplate(ISerializationContext context, MobaTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
