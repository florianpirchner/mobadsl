grammar org.mobadsl.^grammar.Moba with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.mobadsl.semantic.model/model/Moba.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MobaModel:
	features+=MobaModelFeature*;

MobaModelFeature:
	MobaProject | MobaApplication;

MobaProject:
	'project' name=ID 'version' '=' version=VERSION MobaFriendsAble '{'
	(('uiApp' '=' uiApplication=[MobaApplication|ID_VERSION])?
	&
	('backgroundApp' '=' backgroundApplication=[MobaApplication|ID_VERSION])?)
	'}';

MobaApplication:
	'application' name=ID 'version' '=' version=VERSION MobaFriendsAble '{'
	(features+=MobaApplicationFeature*)
	'}';

MobaApplicationFeature:
	MobaDataType | MobaTemplate | MobaConstant | MobaSettings | MobaData | MobaREST | MobaGenerator | MobaAuthorization |
	MobaTransportSerializationType | MobaExternalModule | MobaTrigger |
	MobaGeneratorSlot | MobaServer;

MobaServer:
	'server' name=ID 'url' '=' (urlString=STRING | urlConst=[MobaConstant|CONSTANT]) ('extends' superType=[MobaServer])?
	MobaFriendsAble '{'
	(('autorizations' '=' '(' authorization+=[MobaAuthorization|CONSTANT] (','
	authorization+=[MobaAuthorization|CONSTANT])* ')')? &
	('services' '=' '(' services+=[MobaREST] (',' services+=[MobaREST])* ')')?)
	'}';

	/**
 * Will import a Moba-Application.
 */
MobaTemplate:
	'use template' (template=[MobaApplication|ID_VERSION] | downloadTemplate=DOWNLOAD_TEMPLATE);

MobaGenerator:
	(active?='active')? 'generator' name=ID '{'
	features+=MobaGeneratorFeature*
	'}';

MobaGeneratorFeature:
	MobaGeneratorIDFeature | MobaGeneratorMixinFeature;

MobaGeneratorIDFeature:
	'extensionPoint' generatorId=FQN ':' generatorVersion=VERSION;

MobaGeneratorMixinFeature:
	'mixin' generatorRef=[MobaGenerator|ID_VERSION];

MobaAuthorization:
	'authorization' name=CONSTANT MobaFriendsAble;

MobaTransportSerializationType:
	'serialization' name=CONSTANT MobaFriendsAble;

MobaDataType:
	'datatype' name=ID ('extends' superType=[MobaDataType])?
	((array?='isArray')?
	& ('constraints' '(' constraints+=MobaConstraint (',' constraints+=MobaConstraint)* ')')?
	& (((date?='isDate' | time?='isTime' | timestamp?='isTimestamp') ('(' (dateFormatString=STRING |
	dateFormatConst=[MobaConstant|CONSTANT]) ')')?)
	| (enumAST=MobaEnum)
	| (string?="isString" (primitive?='isPrimitive')?)
	| (bool?="isBool" (primitive?='isPrimitive')?)
	| (numeric?="isNumeric" (primitive?='isPrimitive')?)
	| (decimal?="isDecimal" (primitive?='isPrimitive')?))) MobaFriendsAble;

MobaEnum:
	{MobaEnum}
	'enum' '{'
	literals+=MobaEnumLiteral*
	'}';

MobaEnumLiteral:
	'lit' name=CONSTANT '=' '(' literal=STRING ',' value=INT ((',' default?='isDefault')? & (',' undefined?='isUndefined')?)')';

MobaConstant:
	'const' name=CONSTANT '=' valueAST=MobaConstantValue MobaFriendsAble;

MobaConstantValue:
	(valueString=STRING | valueInt=INT | valueDouble=DOUBLE | (valueConst=[MobaConstant|CONSTANT] ('->'
	valueConstFunctions+=MobaConstantValueFunction)*)) ('+'
	tail=MobaConstantValue)?;

enum MobaConstantValueFunction:
	TO_FIRST_LOWER_CASE="toFirstLower" | TO_FIRST_UPPER_CASE="toFirstUpper" | TO_LOWER_CASE="toLowerCase" |
	TO_UPPER_CASE="toUpperCase";

fragment MobaFriendsAble:
	(('friends' '(' friends+=MobaFriend (',' friends+=MobaFriend)* ')')? & ('[' properties+=MobaProperty (','
	properties+=MobaProperty)* ']')?);

MobaFriend:
	(valueString=STRING | valueConst=[MobaConstant|CONSTANT]);

MobaProperty:
	(keyString=STRING | keyConst=[MobaConstant|CONSTANT]) '=' (valueString=STRING | valueConst=[MobaConstant|CONSTANT]);

MobaData:
	MobaEntity | MobaDto | MobaQueue;

MobaSettings:
	{MobaSettings}
	(active?='active')? 'settings' name=ID ('extends' superType=[MobaSettings])? MobaFriendsAble '{'
	features+=MobaSettingsFeature*
	'}';

MobaCache:
	{MobaCache}
	'cache'
	// optional
	('('
	// type
	(('type' '=' (cacheTypeString=STRING |
	cacheTypeConst=[MobaConstant]))?
	// strategy
	& ('strategy' '=' (cacheStrategyString=STRING |
	cacheStrategyConst=[MobaConstant]))?) ')')?;

MobaEntity:
	'entity' name=ID (('extends' superType=[MobaEntity])? & (cache=MobaCache)?) MobaFriendsAble '{'
	features+=MobaEntityFeature*
	(index=MobaEntityIndex)?
	'}';

MobaEntityIndex:
	'index' attributes+=[MobaEntityAttribute|ID] (',' attributes+=[MobaEntityAttribute|ID]*);

MobaDto:
	'dto' name=ID ('extends' superType=[MobaDto])? MobaFriendsAble '{'
	features+=MobaDtoFeature*
	'}';

MobaQueue:
	'queue' name=ID ('extends' superType=[MobaQueue])? MobaFriendsAble '{'
	features+=MobaQueueFeature*
	'}';

MobaREST:
	MobaRESTCustomService | MobaRESTCrud | MobaRESTWorkflow;

MobaRESTCustomService:
	'rest' (bigData?='bigData')? name=ID ('extends' superType=[MobaRESTCustomService])? MobaFriendsAble '{'
	(('headers' '{'
	headers+=MobaRestHeader*
	'}')? &
	('parameters' '{'
	parameters+=MobaRestParameter*
	'}')? &
	('requestDto' '=' requestDto=MobaRESTPayloadDefinition)?
	&
	('responseDto' '=' responseDto=MobaRESTPayloadDefinition)?
	&
	('errorDto' '=' errorDto=MobaRESTPayloadDefinition)?
	&
	('method' '=' operation=MobaRESTMethods)?)
	'}';

MobaRESTPayloadDefinition:
	dto=[MobaDto] ((array?='isArray')? & ('as' serializationType=[MobaTransportSerializationType|CONSTANT])?);

MobaRestParameter returns MobaRESTAttribute:
	'param' type=[MobaDataType] (-> nameString=ID | nameConst=[MobaConstant|CONSTANT]) ('=' (valueString=STRING |
	valueInt=INT | valueDouble=DOUBLE | valueConst=[MobaConstant|CONSTANT]))?;

MobaRestHeader returns MobaRESTAttribute:
	'param' type=[MobaDataType] (-> nameString=ID | nameConst=[MobaConstant|CONSTANT]) ('=' (valueString=STRING |
	valueInt=INT | valueDouble=DOUBLE | valueConst=[MobaConstant|CONSTANT]))?;

MobaRESTCrud:
	'restCrud' name=ID ('extends' superType=[MobaRESTCrud])? MobaFriendsAble;

MobaRESTWorkflow:
	'restWorkflow' name=ID ('extends' superType=[MobaRESTWorkflow])? MobaFriendsAble '{'
	('service' services+=[MobaREST])*
	'}';

MobaEntityFeature:
	MobaEntityAttribute | MobaEntityReference | MobaEntityEmbeddable;

MobaEntityAttribute:
	'var' ((lazy?='lazy')? & (transient?='transient')? & (domainKey?='domainKey')? &
	(domainDescription?='domainDescription')? 
	& ('format' '(' (formatString=STRING | formatConst=[MobaConstant|CONSTANT]) ')')?
	& ('constraints' '(' constraints+=MobaConstraint (','
	constraints+=MobaConstraint)* ')')?)
	type=[MobaDataType] MobaMultiplicityAble name=ID MobaFriendsAble;

MobaSettingsFeature:
	MobaSettingsAttribute;

MobaSettingsAttribute:
	'var' ((lazy?='lazy')? & (transient?='transient')? & (domainKey?='domainKey')? &
	(domainDescription?='domainDescription')? 
	& ('format' '(' (formatString=STRING | formatConst=[MobaConstant|CONSTANT]) ')')?
	& ('constraints' '(' constraints+=MobaConstraint (','
	constraints+=MobaConstraint)* ')')?)
	type=[MobaDataType] MobaMultiplicityAble name=ID MobaFriendsAble;

fragment MobaMultiplicityAble:
	(multiplicity=MobaMuliplicity)?;

MobaEntityReference:
	'ref' ((cascading?='cascading')? & (lazy?='lazy')? & (transient?='transient')?) type=[MobaEntity] MobaMultiplicityAble
	name=ID ('opposite' opposite=[MobaEntityReference])?
	MobaFriendsAble;
	
MobaEntityEmbeddable: 
	'embed' (transient?='transient')? type=[MobaEntity] MobaMultiplicityAble
	name=ID
	MobaFriendsAble;

MobaDtoFeature:
	MobaDtoAttribute | MobaDtoReference | MobaDtoEmbeddable;

MobaDtoAttribute:
	'var' ((lazy?='lazy')? & (transient?='transient')? & (domainKey?='domainKey')? &
	(domainDescription?='domainDescription')? 
	& ('format' '(' (formatString=STRING | formatConst=[MobaConstant|CONSTANT]) ')')? 
	& ('constraints' '(' constraints+=MobaConstraint (','
	constraints+=MobaConstraint)* ')')? & ('alias' '(' alias=ID ')')?)
	type=[MobaDataType] MobaMultiplicityAble name=ID MobaFriendsAble;

MobaDtoReference:
	'ref' ((cascading?='cascading')? & (lazy?='lazy')? & (transient?='transient')?) type=[MobaDto]
	MobaMultiplicityAble
	name=ID ('opposite' opposite=[MobaDtoReference])?
	MobaFriendsAble;
	
MobaDtoEmbeddable:
	'embed' (transient?='transient')? type=[MobaDto]
	MobaMultiplicityAble
	name=ID
	MobaFriendsAble;

MobaQueueFeature:
	MobaQueueReference;

MobaQueueReference:
	'ref' ((cascading?='cascading')? & (lazy?='lazy')? & (transient?='transient')?) type=[MobaData] MobaMultiplicityAble
	name=ID
	MobaFriendsAble;

MobaMuliplicity:
	'[' (lower=MobaLowerBound) ('..' upper=MobaUpperBound)? ']';

MobaConstraint:
	MobaRegexpConstraint | MobaMinConstraint | MobaMaxConstraint | MobaMinLengthConstraint | MobaMaxLengthConstraint |
	MobaDigitsConstraint | MobaNullConstraint | MobaNotNullConstraint;

MobaRegexpConstraint:
	'regexp' '=' (filterString=STRING | filterConst=[MobaConstant|CONSTANT]);

MobaMinConstraint:
	'min' '=' (filterValue=DOUBLE | filterConst=[MobaConstant|CONSTANT]);

MobaMaxConstraint:
	'max' '=' (filterValue=DOUBLE | filterConst=[MobaConstant|CONSTANT]);

MobaMinLengthConstraint:
	'minLength' '=' (filterValue=INT | filterConst=[MobaConstant|CONSTANT]);

MobaMaxLengthConstraint:
	'maxLength' '=' (filterValue=INT | filterConst=[MobaConstant|CONSTANT]);

MobaDigitsConstraint:
	'digits' '(' (filterIntegerValue=INT | filterIntegerConst=[MobaConstant|CONSTANT]) ',' (filterFractionValue=INT |
	filterFractionConst=[MobaConstant|CONSTANT]) ')';

MobaNullConstraint:
	{MobaNullConstraint}
	'isNull';

MobaNotNullConstraint:
	{MobaNotNullConstraint}
	'isNotNull';

MobaGeneratorSlot:
	'slot' name=ID ('type' type=STRING)?;

MobaTrigger:
	MobaAppInstallTrigger | MobaAppUpdateTrigger | MobaEmailTrigger | MobaDeviceStartupTrigger | MobaSMSTrigger |
	MobaPushTrigger | MobaGeofenceTrigger;

MobaAppInstallTrigger:
	'trigger app install' name=ID;

MobaAppUpdateTrigger:
	'trigger app update' name=ID;

MobaEmailTrigger:
	'trigger email' name=ID;

MobaDeviceStartupTrigger:
	'trigger device start' name=ID;

MobaSMSTrigger:
	'trigger sms' name=ID;

MobaPushTrigger:
	'trigger push' name=ID;

MobaGeofenceTrigger:
	'trigger geofence' name=ID 'event' '=' eventType=MobaGeofenceEvent;

enum MobaGeofenceEvent:
	ENTER="enter" | LEAVE="leave";

MobaExternalModule:
	MobaBluetoothModule | MobaPushModule | MobaNFCModule;

MobaBluetoothModule:
	'module bluetooth' name=ID 'type' '=' type=MobaBlueToothModuleType;

enum MobaBlueToothModuleType:
	LE="low energy" | SPP="spp" | BEACON="beacon";

MobaPushModule:
	'module push' name=ID;

MobaNFCModule:
	'module NFC' name=ID 'type' '=' type=MobaNFCModuleType;

enum MobaNFCModuleType:
	ID="id" | CUSTOM="custom" | TEXT='text';

enum MobaLowerBound:
	MANY='*' | ZERO='0' | OPTIONAL='?' | ATLEASTONE='+' | ONE='1';

enum MobaUpperBound:
	MANY='*' | ONE='1';

enum MobaRESTMethods:
	GET="GET" | POST="POST" | PUT=" PUT" | DELETE="DELETE";

	// if this is removed, antlr detects an error. INT and FLOAT can not become created since the are not unique definitions. 
terminal INT returns ecore::EInt:
	super::INT;

terminal DOUBLE returns ecore::EDouble:
	('+' | '-')? INT ('.' INT)?;

terminal CONSTANT:
	('A'..'Z') ('A'..'Z' | '_' | '0'..'9')*;

terminal ID:
	super::ID;

terminal VERSION:
	INT '.' INT '.' INT ('-SNAPSHOT')?;

terminal FQN:
	ID ('.' ID)*;

terminal ID_VERSION:
	ID ":" VERSION;

terminal DOWNLOAD_TEMPLATE:
	'index://' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')* ':' ID_VERSION;

terminal FLOAT returns ecore::EFloat:
	INT
	(('e' | 'E') ('+' | '-')? INT)?
	(('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
