/*
 * generated by Xtext 2.9.0.beta6
 */
package org.mobadsl.grammar.scoping

import com.google.inject.Inject
import java.util.List
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.resource.impl.SimpleResourceDescriptionsBasedContainerManager
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.mobadsl.semantic.model.moba.MobaApplication
import org.mobadsl.semantic.model.moba.MobaPackage
import org.eclipse.xtext.resource.IResourceDescriptions

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MobaScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject SimpleResourceDescriptionsBasedContainerManager containerManager
	@Inject IResourceDescriptions resourceDescriptions

	def IScope scope_MobaConstant(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allConstants);
	}

	def IScope scope_MobaDataType(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allDataTypes);
	}

	def IScope scope_MobaData(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allDatas);
	}

	def IScope scope_MobaDto(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allDtos);
	}

	def IScope scope_MobaPayload(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allPayloads);
	}

	def IScope scope_MobaQueue(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allQueues);
	}

	def IScope scope_MobaSettings(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allSettings);
	}

	def IScope scope_MobaService(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allServices);
	}

	def IScope scope_MobaRestCrud(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allRestCruds);
	}

	def IScope scope_MobaRestCustom(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allRestCustoms);
	}

	def IScope scope_MobaGenerator(MobaApplication ctx, EReference ref) {
		return Scopes.scopeFor(ctx.allGenerators);
	}

//	def IScope scope_MobaApplication_usedGenerator(MobaApplication ctx, EReference ref) {
//		return super.getScope(ctx, ref);
//	}
	def IScope scope_MobaApplication(MobaApplication ctx, EReference ref) {

		val ctxDesciption = resourceDescriptions.getResourceDescription(ctx.eResource.URI)
		val containers = containerManager.getVisibleContainers(ctxDesciption, resourceDescriptions)

		val List<IEObjectDescription> result = newArrayList()
		for (container : containers) {
			val applications = container.getExportedObjectsByType(MobaPackage.Literals.MOBA_APPLICATION)
			result.addAll(applications)
		}
		return new SimpleScope(result)
	}

}
