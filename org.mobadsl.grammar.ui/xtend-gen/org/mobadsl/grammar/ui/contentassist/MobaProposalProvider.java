/**
 * generated by Xtext 2.9.0.beta6
 */
package org.mobadsl.grammar.ui.contentassist;

import com.google.common.base.Objects;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.mobadsl.api.template.repository.ITemplateRepositoryManager;
import org.mobadsl.grammar.ui.contentassist.AbstractMobaProposalProvider;
import org.mobadsl.semantic.model.moba.index.MobaIndex;
import org.mobadsl.semantic.model.moba.index.MobaIndexEntry;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class MobaProposalProvider extends AbstractMobaProposalProvider {
  @Override
  public void completeMobaTemplate_Template(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeMobaTemplate_Template(model, assignment, context, acceptor);
    final ITemplateRepositoryManager manager = this.getManager();
    boolean _notEquals = (!Objects.equal(manager, null));
    if (_notEquals) {
      List<MobaIndexEntry> _availableEntries = manager.getAvailableEntries();
      final Consumer<MobaIndexEntry> _function = (MobaIndexEntry it) -> {
        EObject _eContainer = it.eContainer();
        final MobaIndex index = ((MobaIndex) _eContainer);
        String _createProposalValue = this.createProposalValue(index, it);
        String _name = index.getName();
        String _plus = ("available in repo " + _name);
        String _plus_1 = (_plus + ": ");
        String _name_1 = it.getName();
        String _plus_2 = (_plus_1 + _name_1);
        String _plus_3 = (_plus_2 + ":");
        String _version = it.getVersion();
        String _plus_4 = (_plus_3 + _version);
        String _plus_5 = (_plus_4 + " - ");
        String _description = it.getDescription();
        String _plus_6 = (_plus_5 + _description);
        StyledString _styledString = new StyledString(_plus_6);
        Image _image = this.getImage(it);
        ConfigurableCompletionProposal _doCreateProposal = this.doCreateProposal(_createProposalValue, _styledString, _image, 0, context);
        acceptor.accept(_doCreateProposal);
      };
      _availableEntries.forEach(_function);
    }
  }
  
  public String createProposalValue(final MobaIndex index, final MobaIndexEntry entry) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("...index:");
    String _id = index.getId();
    _builder.append(_id, "");
    _builder.append(":");
    String _name = entry.getName();
    _builder.append(_name, "");
    _builder.append(":");
    String _version = entry.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public ITemplateRepositoryManager getManager() {
    Bundle _bundle = FrameworkUtil.getBundle(MobaProposalProvider.class);
    final BundleContext bc = _bundle.getBundleContext();
    final ServiceReference<ITemplateRepositoryManager> ref = bc.<ITemplateRepositoryManager>getServiceReference(ITemplateRepositoryManager.class);
    boolean _notEquals = (!Objects.equal(ref, null));
    if (_notEquals) {
      final ITemplateRepositoryManager manager = bc.<ITemplateRepositoryManager>getService(ref);
      return manager;
    }
    return null;
  }
}
